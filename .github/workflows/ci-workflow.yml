name: Compilation & tests

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - develop
  pull_request:

jobs:
  build_application:
    name: Build application using the reusable workflow
    uses: LedgerHQ/ledger-app-workflows/.github/workflows/reusable_build.yml@v1
    with:
      upload_app_binaries_artifact: "compiled_app_binaries"

  ragger_tests:
    name: Run ragger tests using the reusable workflow
    needs: build_application
    uses: LedgerHQ/ledger-app-workflows/.github/workflows/reusable_ragger_tests.yml@v1
    with:
      download_app_binaries_artifact: "compiled_app_binaries"
      test_dir: tests

  analyse:
    name: Analyse
    strategy:
      matrix:
        sdk: ["$NANOS_SDK", "$NANOX_SDK", "$NANOSP_SDK"]
        #'cpp' covers C and C++
        language: ["cpp"]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-legacy:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      # CodeQL will create the database during the compilation
      - name: Build
        run: |
          make BOLOS_SDK=${{ matrix.sdk }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  job_unit_test:
    name: Unit test
    needs: build_application
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build unit tests
        run: |
          cd unit-tests/
          cmake -Bbuild -H. && make -C build && make -C build test

      - name: Generate code coverage
        run: |
          cd unit-tests/
          lcov --directory . -b "$(realpath build/)" --capture --initial -o coverage.base && \
          lcov --rc lcov_branch_coverage=1 --directory . -b "$(realpath build/)" --capture -o coverage.capture && \
          lcov --directory . -b "$(realpath build/)" --add-tracefile coverage.base --add-tracefile coverage.capture -o coverage.info && \
          lcov --directory . -b "$(realpath build/)" --remove coverage.info '*/unit-tests/*' -o coverage.info && \
          genhtml coverage.info -o coverage

      - uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: unit-tests/coverage

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./unit-tests/coverage.info
          flags: unittests
          name: codecov-app-neo_n3
          fail_ci_if_error: true
          verbose: true

      - name: HTML documentation
        run: doxygen .doxygen/Doxyfile

      - uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: doc/html
