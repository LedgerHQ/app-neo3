name: Compilation & tests

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - develop
  pull_request:

jobs:
  nano_build:
    name: Build Neo N3 application for NanoS, X and S+
    strategy:
      matrix:
        include:
          - SDK: "$NANOS_SDK"
            device: nanos
          - SDK: "$NANOX_SDK"
            device: nanox
          - SDK: "$NANOSP_SDK"
            device: nanosp
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-lite:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          make BOLOS_SDK=${{ matrix.SDK }}
          cp bin/app.elf bin/neo_n3_${{ matrix.device }}.elf

      - name: Upload app binary
        uses: actions/upload-artifact@v3
        with:
          name: neo_n3_binaries
          path: ./bin/neo_n3_${{ matrix.device }}.elf
          if-no-files-found: error


  jobs-e2e-pytest-tests:
    name: Pytest tests

    needs: nano_build
    runs-on: ubuntu-latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Download app binaries
        uses: actions/download-artifact@v3

      - name: Gather artifacts
        run: |
          mkdir tests/elfs
          mv *_binaries/*.elf tests/elfs

      - name: Install APT dependencies
        run: sudo apt-get update && sudo apt-get install -y qemu-user-static

      - name: Install Ragger
        run: |
          pip install --extra-index-url https://test.pypi.org/simple/ -r tests/requirements.txt

      - name: Run speculos tests
        run: |
          pytest -v --tb=short ./tests

  job_scan_build:
    name: Clang Static Analyzer
    needs: nano_build
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - uses: actions/checkout@v3

      - name: Build with Clang Static Analyzer
        run: |
          make clean
          scan-build --use-cc=clang -analyze-headers -enable-checker security -enable-checker unix -enable-checker valist -o scan-build --status-bugs make default
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: scan-build
          path: scan-build

  job_coverity_scan:
    name: Coverity Scan
    needs: nano_build
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-scanner:latest

    steps:
      - uses: actions/checkout@v3

      - name: Build with cov-build
        run: |
          make clean
          cov-build --dir cov-int make default
      - name: Submit the result to Coverity Scan
        run: |
          tar czvf cov-int.tar.gz cov-int
          curl \
            --form token=$TOKEN \
            --form email=$EMAIL \
            --form file=@cov-int.tar.gz \
            --form version=master \
            --form description="NEO3 app" \
            https://scan.coverity.com/builds?project=LedgerHQ%2Fapp-neo_n3
        env:
          EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}

  job_unit_test:
    name: Unit test
    needs: nano_build
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build unit tests
        run: |
          cd unit-tests/
          cmake -Bbuild -H. && make -C build && make -C build test

      - name: Generate code coverage
        run: |
          cd unit-tests/
          lcov --directory . -b "$(realpath build/)" --capture --initial -o coverage.base && \
          lcov --rc lcov_branch_coverage=1 --directory . -b "$(realpath build/)" --capture -o coverage.capture && \
          lcov --directory . -b "$(realpath build/)" --add-tracefile coverage.base --add-tracefile coverage.capture -o coverage.info && \
          lcov --directory . -b "$(realpath build/)" --remove coverage.info '*/unit-tests/*' -o coverage.info && \
          genhtml coverage.info -o coverage

      - uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: unit-tests/coverage

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./unit-tests/coverage.info
          flags: unittests
          name: codecov-app-neo_n3
          fail_ci_if_error: true
          verbose: true

      - name: HTML documentation
        run: doxygen .doxygen/Doxyfile

      - uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: doc/html
